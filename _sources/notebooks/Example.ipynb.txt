{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Demo of modflow-obs\n",
    "This page demonstrates some of the core features of modflow-obs. Specifically:\n",
    "\n",
    "* creation of head observations from time series, including\n",
    "    * in-tandem processing of observation data and MODFLOW output\n",
    "    * creation of instruction files\n",
    "    \n",
    "References:  \n",
    "[Modflow-setup package](https://github.com/aleaf/modflow-setup)  \n",
    "[Affine package](https://github.com/sgillies/affine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:08.833047Z",
     "iopub.status.busy": "2020-10-13T14:48:08.832332Z",
     "iopub.status.idle": "2020-10-13T14:48:09.084872Z",
     "shell.execute_reply": "2020-10-13T14:48:09.084022Z"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inputs\n",
    "\n",
    "Input and output paths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.088788Z",
     "iopub.status.busy": "2020-10-13T14:48:09.088384Z",
     "iopub.status.idle": "2020-10-13T14:48:09.091630Z",
     "shell.execute_reply": "2020-10-13T14:48:09.091283Z"
    }
   },
   "outputs": [],
   "source": [
    "data_path = Path('../mfobs/tests/data/shellmound/')\n",
    "\n",
    "output_folder = Path('output')\n",
    "output_folder.mkdir(exist_ok=True)  # make the output folder if it doesn't exist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### model grid definition\n",
    "read the model grid json file created by ``modflow-setup`` and create an ``affine.Affine`` instance describing the grid orientation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.099565Z",
     "iopub.status.busy": "2020-10-13T14:48:09.095946Z",
     "iopub.status.idle": "2020-10-13T14:48:09.132438Z",
     "shell.execute_reply": "2020-10-13T14:48:09.132057Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Affine(1000.0, 0.0, 500955.0,\n",
       "       0.0, -1000.0, 1205285.0)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from mfobs.modflow import get_modelgrid_transform\n",
    "\n",
    "modelgrid_transform = get_modelgrid_transform(data_path / 'shellmound_grid.json')\n",
    "modelgrid_transform"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### model time discretization\n",
    "read table of stress period information created by ``modflow-setup``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.145632Z",
     "iopub.status.busy": "2020-10-13T14:48:09.137114Z",
     "iopub.status.idle": "2020-10-13T14:48:09.155107Z",
     "shell.execute_reply": "2020-10-13T14:48:09.154581Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>per</th>\n",
       "      <th>perlen</th>\n",
       "      <th>nstp</th>\n",
       "      <th>tsmult</th>\n",
       "      <th>steady</th>\n",
       "      <th>oc</th>\n",
       "      <th>start_datetime</th>\n",
       "      <th>end_datetime</th>\n",
       "      <th>parent_sp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>{'head': 'last', 'budget': 'last'}</td>\n",
       "      <td>1998-04-01</td>\n",
       "      <td>1998-04-01</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3288.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3287.0</td>\n",
       "      <td>10</td>\n",
       "      <td>1.5</td>\n",
       "      <td>False</td>\n",
       "      <td>{'head': 'last', 'budget': 'last'}</td>\n",
       "      <td>1998-04-01</td>\n",
       "      <td>2007-04-01</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3471.0</td>\n",
       "      <td>2</td>\n",
       "      <td>183.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>False</td>\n",
       "      <td>{'head': 'last', 'budget': 'last'}</td>\n",
       "      <td>2007-04-01</td>\n",
       "      <td>2007-10-01</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3654.0</td>\n",
       "      <td>3</td>\n",
       "      <td>183.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>False</td>\n",
       "      <td>{'head': 'last', 'budget': 'last'}</td>\n",
       "      <td>2007-10-01</td>\n",
       "      <td>2008-04-01</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3837.0</td>\n",
       "      <td>4</td>\n",
       "      <td>183.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>False</td>\n",
       "      <td>{'head': 'last', 'budget': 'last'}</td>\n",
       "      <td>2008-04-01</td>\n",
       "      <td>2008-10-01</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     time  per  perlen  nstp  tsmult  steady  \\\n",
       "0     1.0    0     1.0     1     1.0    True   \n",
       "1  3288.0    1  3287.0    10     1.5   False   \n",
       "2  3471.0    2   183.0     5     1.5   False   \n",
       "3  3654.0    3   183.0     5     1.5   False   \n",
       "4  3837.0    4   183.0     5     1.5   False   \n",
       "\n",
       "                                   oc start_datetime end_datetime  parent_sp  \n",
       "0  {'head': 'last', 'budget': 'last'}     1998-04-01   1998-04-01        NaN  \n",
       "1  {'head': 'last', 'budget': 'last'}     1998-04-01   2007-04-01        NaN  \n",
       "2  {'head': 'last', 'budget': 'last'}     2007-04-01   2007-10-01        NaN  \n",
       "3  {'head': 'last', 'budget': 'last'}     2007-10-01   2008-04-01        NaN  \n",
       "4  {'head': 'last', 'budget': 'last'}     2008-04-01   2008-10-01        NaN  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "perioddata = pd.read_csv(data_path / 'tables/stress_period_data.csv')\n",
    "perioddata.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above \"period_data\" table has start/end datetimes in MODFLOW time, but often we want a steady-state period to effectively represent a different time period. Define start and end dates that bracket the time period represented by steady-state period 0:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.158881Z",
     "iopub.status.busy": "2020-10-13T14:48:09.158428Z",
     "iopub.status.idle": "2020-10-13T14:48:09.160959Z",
     "shell.execute_reply": "2020-10-13T14:48:09.160586Z"
    }
   },
   "outputs": [],
   "source": [
    "steady_state_period_start = '2008-04-01'\n",
    "steady_state_period_end = '2008-9-30'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### model property information for T-weighted averaging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.164887Z",
     "iopub.status.busy": "2020-10-13T14:48:09.164478Z",
     "iopub.status.idle": "2020-10-13T14:48:09.167699Z",
     "shell.execute_reply": "2020-10-13T14:48:09.167327Z"
    }
   },
   "outputs": [],
   "source": [
    "top_array = data_path / 'external/top.dat'\n",
    "botm_arrays = [data_path / 'external/botm{}.dat'.format(i)\n",
    "               for i in range(13)]\n",
    "hk_arrays = [data_path / 'external/k{}.dat'.format(i)\n",
    "             for i in range(13)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### head observation data\n",
    "We start with some head observation data that already has\n",
    "\n",
    "* been culled to model area, reprojected to model CRS, converted to model units, etc.\n",
    "* open interval information\n",
    "* `obsnme` (in the PEST parlance) prefixes identifying the sites\n",
    "* prelimary groupings based on location (optional)\n",
    "\n",
    "The observation data may or may not be broken into a data table with time series, and a metadata table with site information.\n",
    "\n",
    "The [``USGS-MAP-gwmodels package``](https://github.com/aleaf/usgs-map-gwmodels) is one way to create such input data from sources including the USGS National Water Information System (NWIS).\n",
    "\n",
    "The metadata (site info):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.171737Z",
     "iopub.status.busy": "2020-10-13T14:48:09.171088Z",
     "iopub.status.idle": "2020-10-13T14:48:09.194957Z",
     "shell.execute_reply": "2020-10-13T14:48:09.195397Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>site_no</th>\n",
       "      <th>head</th>\n",
       "      <th>last_head</th>\n",
       "      <th>n</th>\n",
       "      <th>aqfr_cd</th>\n",
       "      <th>nat_aqfr_cd</th>\n",
       "      <th>screen_botm</th>\n",
       "      <th>screen_top</th>\n",
       "      <th>well_depth</th>\n",
       "      <th>well_el</th>\n",
       "      <th>...</th>\n",
       "      <th>start_dt</th>\n",
       "      <th>end_dt</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>well_botm</th>\n",
       "      <th>category</th>\n",
       "      <th>orig_scbot</th>\n",
       "      <th>orig_sctop</th>\n",
       "      <th>obsprefix</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USGS:333034090150501</td>\n",
       "      <td>31.56</td>\n",
       "      <td>31.56</td>\n",
       "      <td>1.0</td>\n",
       "      <td>112MRVA</td>\n",
       "      <td>N100MSRVVL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>39.05</td>\n",
       "      <td>...</td>\n",
       "      <td>2008-03-01</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>530104.14</td>\n",
       "      <td>1176208.54</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USGS:333034090150501</td>\n",
       "      <td>heads</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>USGS:333116090290101</td>\n",
       "      <td>19.41</td>\n",
       "      <td>19.41</td>\n",
       "      <td>1.0</td>\n",
       "      <td>112MRVA</td>\n",
       "      <td>N100MSRVVL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>35.36</td>\n",
       "      <td>...</td>\n",
       "      <td>2008-04-01</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>508638.90</td>\n",
       "      <td>1176240.13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USGS:333116090290101</td>\n",
       "      <td>mscha</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>USGS:333129090251401</td>\n",
       "      <td>19.92</td>\n",
       "      <td>19.92</td>\n",
       "      <td>1.0</td>\n",
       "      <td>112MRVA</td>\n",
       "      <td>N100MSRVVL</td>\n",
       "      <td>-80.15</td>\n",
       "      <td>-67.96</td>\n",
       "      <td>116.0</td>\n",
       "      <td>35.85</td>\n",
       "      <td>...</td>\n",
       "      <td>2008-03-01</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>514422.63</td>\n",
       "      <td>1176982.16</td>\n",
       "      <td>-80.15</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USGS:333129090251401</td>\n",
       "      <td>mscha</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>USGS:333135090124402</td>\n",
       "      <td>33.63</td>\n",
       "      <td>33.63</td>\n",
       "      <td>1.0</td>\n",
       "      <td>112MRVA</td>\n",
       "      <td>N100MSRVVL</td>\n",
       "      <td>-55.49</td>\n",
       "      <td>-43.29</td>\n",
       "      <td>95.0</td>\n",
       "      <td>39.51</td>\n",
       "      <td>...</td>\n",
       "      <td>2008-03-01</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>533847.10</td>\n",
       "      <td>1177444.10</td>\n",
       "      <td>-55.49</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USGS:333135090124402</td>\n",
       "      <td>heads</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>USGS:333135090245901</td>\n",
       "      <td>20.44</td>\n",
       "      <td>20.44</td>\n",
       "      <td>1.0</td>\n",
       "      <td>112MRVA</td>\n",
       "      <td>N100MSRVVL</td>\n",
       "      <td>-76.76</td>\n",
       "      <td>-64.57</td>\n",
       "      <td>113.0</td>\n",
       "      <td>36.24</td>\n",
       "      <td>...</td>\n",
       "      <td>2008-03-01</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>514795.42</td>\n",
       "      <td>1177190.55</td>\n",
       "      <td>-76.76</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USGS:333135090245901</td>\n",
       "      <td>mscha</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                site_no   head  last_head    n  aqfr_cd nat_aqfr_cd  \\\n",
       "0  USGS:333034090150501  31.56      31.56  1.0  112MRVA  N100MSRVVL   \n",
       "1  USGS:333116090290101  19.41      19.41  1.0  112MRVA  N100MSRVVL   \n",
       "2  USGS:333129090251401  19.92      19.92  1.0  112MRVA  N100MSRVVL   \n",
       "3  USGS:333135090124402  33.63      33.63  1.0  112MRVA  N100MSRVVL   \n",
       "4  USGS:333135090245901  20.44      20.44  1.0  112MRVA  N100MSRVVL   \n",
       "\n",
       "   screen_botm  screen_top  well_depth  well_el  ...    start_dt      end_dt  \\\n",
       "0          NaN         NaN         NaN    39.05  ...  2008-03-01  2018-10-01   \n",
       "1          NaN         NaN         NaN    35.36  ...  2008-04-01  2018-10-01   \n",
       "2       -80.15      -67.96       116.0    35.85  ...  2008-03-01  2018-10-01   \n",
       "3       -55.49      -43.29        95.0    39.51  ...  2008-03-01  2018-10-01   \n",
       "4       -76.76      -64.57       113.0    36.24  ...  2008-03-01  2018-10-01   \n",
       "\n",
       "           x           y  well_botm  category  orig_scbot  orig_sctop  \\\n",
       "0  530104.14  1176208.54        NaN         4         NaN         NaN   \n",
       "1  508638.90  1176240.13        NaN         4         NaN         NaN   \n",
       "2  514422.63  1176982.16     -80.15         2         NaN         NaN   \n",
       "3  533847.10  1177444.10     -55.49         2         NaN         NaN   \n",
       "4  514795.42  1177190.55     -76.76         2         NaN         NaN   \n",
       "\n",
       "              obsprefix  group  \n",
       "0  USGS:333034090150501  heads  \n",
       "1  USGS:333116090290101  mscha  \n",
       "2  USGS:333129090251401  mscha  \n",
       "3  USGS:333135090124402  heads  \n",
       "4  USGS:333135090245901  mscha  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "head_obs_info = pd.read_csv(data_path / 'tables/preprocessed_head_obs_info.csv')\n",
    "head_obs_info.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Time series of head at the locations in the metadata:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.199327Z",
     "iopub.status.busy": "2020-10-13T14:48:09.198722Z",
     "iopub.status.idle": "2020-10-13T14:48:09.210345Z",
     "shell.execute_reply": "2020-10-13T14:48:09.209886Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>site_no</th>\n",
       "      <th>datetime</th>\n",
       "      <th>head</th>\n",
       "      <th>last_head</th>\n",
       "      <th>n</th>\n",
       "      <th>obsprefix</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USGS:333034090150501</td>\n",
       "      <td>2008-03-01</td>\n",
       "      <td>31.43</td>\n",
       "      <td>31.43</td>\n",
       "      <td>1</td>\n",
       "      <td>USGS:333034090150501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>USGS:333034090150501</td>\n",
       "      <td>2008-09-01</td>\n",
       "      <td>31.61</td>\n",
       "      <td>31.61</td>\n",
       "      <td>1</td>\n",
       "      <td>USGS:333034090150501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>USGS:333034090150501</td>\n",
       "      <td>2009-04-01</td>\n",
       "      <td>32.06</td>\n",
       "      <td>32.06</td>\n",
       "      <td>1</td>\n",
       "      <td>USGS:333034090150501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>USGS:333034090150501</td>\n",
       "      <td>2009-09-01</td>\n",
       "      <td>31.95</td>\n",
       "      <td>31.95</td>\n",
       "      <td>1</td>\n",
       "      <td>USGS:333034090150501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>USGS:333034090150501</td>\n",
       "      <td>2010-03-01</td>\n",
       "      <td>33.03</td>\n",
       "      <td>33.03</td>\n",
       "      <td>1</td>\n",
       "      <td>USGS:333034090150501</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                site_no    datetime   head  last_head  n             obsprefix\n",
       "0  USGS:333034090150501  2008-03-01  31.43      31.43  1  USGS:333034090150501\n",
       "1  USGS:333034090150501  2008-09-01  31.61      31.61  1  USGS:333034090150501\n",
       "2  USGS:333034090150501  2009-04-01  32.06      32.06  1  USGS:333034090150501\n",
       "3  USGS:333034090150501  2009-09-01  31.95      31.95  1  USGS:333034090150501\n",
       "4  USGS:333034090150501  2010-03-01  33.03      33.03  1  USGS:333034090150501"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "head_obs = pd.read_csv(data_path / 'tables/preprocessed_head_obs.csv')\n",
    "head_obs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MODFLOW-6 observation input\n",
    "\n",
    "* the MODFLOW observation names (representing sites) must match those in the ``obsprefix`` column of the preprocessed head data above\n",
    "* a key feature of **Modflow-obs** is computation of simulated heads from transmissivity-weighted averages of the head values simulated for the layers that intersect each well open interval. To take advantage of this feature, for each location (site), a MODFLOW observation must be entered for each layer.\n",
    "* [``Modflow-setup``](https://github.com/aleaf/modflow-setup) can create MODFLOW-6 observation input (with an observation in each layer) automatically, using the locations and ``obsprefixes`` in the above metadata file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.215097Z",
     "iopub.status.busy": "2020-10-13T14:48:09.214321Z",
     "iopub.status.idle": "2020-10-13T14:48:09.216677Z",
     "shell.execute_reply": "2020-10-13T14:48:09.217139Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BEGIN options\n",
      "  DIGITS  10\n",
      "  PRINT_INPUT\n",
      "END options\n",
      "\n",
      "BEGIN continuous  FILEOUT  shellmound.head.obs\n",
      "  usgs:333145090261901  HEAD  1 28 12\n",
      "  usgs:333145090261901  HEAD  2 28 12\n",
      "  usgs:333145090261901  HEAD  3 28 12\n",
      "  usgs:333145090261901  HEAD  4 28 12\n",
      "  usgs:333145090261901  HEAD  5 28 12\n",
      "  usgs:333145090261901  HEAD  6 28 12\n",
      "  usgs:333145090261901  HEAD  7 28 12\n",
      "  usgs:333145090261901  HEAD  8 28 12\n",
      "  usgs:333145090261901  HEAD  9 28 12\n",
      "  usgs:333145090261901  HEAD  10 28 12\n",
      "  usgs:33314509026\n"
     ]
    }
   ],
   "source": [
    "headobs_input_file = data_path / 'shellmound.obs'\n",
    "\n",
    "with open(headobs_input_file) as src:\n",
    "    print(src.read()[:500])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MODFLOW-6 observation output\n",
    "* simulated values at observation locations are returned in a csv file with model timesteps along the row axis, and individual observation locations (1 per layer) along the column axis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.223726Z",
     "iopub.status.busy": "2020-10-13T14:48:09.222421Z",
     "iopub.status.idle": "2020-10-13T14:48:09.224752Z",
     "shell.execute_reply": "2020-10-13T14:48:09.225154Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time,USGS:333145090261901,USGS:333145090261901,USGS:333145090261901,USGS:333145090261901,USGS:333145\n",
      "1.000000000000,29.61748720,29.62154020,29.62504962,29.62677031,29.62761331,29.62882679,29.63409325,2\n"
     ]
    }
   ],
   "source": [
    "headobs_output_file = data_path / 'shellmound.head.obs'\n",
    "with open(headobs_output_file) as src:\n",
    "    print('\\n'.join([l[:100] for l in src.readlines()[:2]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a basic set of head observations\n",
    "\n",
    "* reads head observation data and model output and matches values\n",
    "    * by location using the ``obsprefix`` names\n",
    "    * in time by averaging observed values to the model stress period\n",
    "    * optionally, a model stress period can be labeled as steady-state (``label_period_as_steady_state``), representing average conditions over a time period bracked by a ``steady_state_period_start`` and ``steady_state_period_end``. In this case, the simulated values for the labeled stress period are matched to average values for the steady-state time period.\n",
    "* the model output are assumed to include all layers at each observation location; observation names in the model output are assumed to correspond to ``obsprefix``es in the head observation data\n",
    "* observation layer can be specified explicitly via an ``observed_values_layer_col`` in the head observation data, or, the simulated values can be averaged vertically with transmissivity-based weighting (``observed_values_layer_col=None``). In the latter case, model property arrays (``hk_arrays``, ``top_array``, ``botm_arrays``) must be supplied. At observation sites without open interval information, all model layers are included in the transmissivity-weighted averaging.\n",
    "* observation names to match observed values to their simulated equivalents are constructed in the format of ``<obsprefix>_<date suffix>``, where obsprefix is a site identifier taken from the ``observed_values_site_id_col`` in ``observed_values_file``, and the date suffix is controlled by the ``obsnme_date_suffix_format`` parameter (default of ``'%Y%m'``). Steady-state observations are assigned a suffix of ``'ss'``.\n",
    "* simulated and observed values are written to columns formatted with ``sim_`` or ``obs_<variable_name>``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.230074Z",
     "iopub.status.busy": "2020-10-13T14:48:09.229249Z",
     "iopub.status.idle": "2020-10-13T14:48:09.901651Z",
     "shell.execute_reply": "2020-10-13T14:48:09.902114Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "reading model output from ../mfobs/tests/data/shellmound/shellmound.head.obs...\n",
      "Dropping 11 sites with no information\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/build/aleaf/modflow-obs/mfobs/heads.py:355: UserWarning: No observations between start and end dates of 1998-04-01 and 2007-04-01!\n",
      "  warnings.warn(('No observations between start and '\n",
      "/home/travis/build/aleaf/modflow-obs/mfobs/heads.py:355: UserWarning: No observations between start and end dates of 2007-04-01 and 2007-10-01!\n",
      "  warnings.warn(('No observations between start and '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote output/processed_head_obs.dat.ins\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>per</th>\n",
       "      <th>obsprefix</th>\n",
       "      <th>obsnme</th>\n",
       "      <th>obs_head</th>\n",
       "      <th>sim_head</th>\n",
       "      <th>screen_top</th>\n",
       "      <th>screen_botm</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>obsnme</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>usgs:333145090261901_201310</th>\n",
       "      <td>2013-10-01</td>\n",
       "      <td>15</td>\n",
       "      <td>usgs:333145090261901</td>\n",
       "      <td>usgs:333145090261901_201310</td>\n",
       "      <td>20.86</td>\n",
       "      <td>29.015975</td>\n",
       "      <td>-16.01</td>\n",
       "      <td>-28.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>usgs:333145090261901_201404</th>\n",
       "      <td>2014-04-01</td>\n",
       "      <td>16</td>\n",
       "      <td>usgs:333145090261901</td>\n",
       "      <td>usgs:333145090261901_201404</td>\n",
       "      <td>20.93</td>\n",
       "      <td>28.948578</td>\n",
       "      <td>-16.01</td>\n",
       "      <td>-28.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>usgs:333145090261901_201410</th>\n",
       "      <td>2014-10-01</td>\n",
       "      <td>17</td>\n",
       "      <td>usgs:333145090261901</td>\n",
       "      <td>usgs:333145090261901_201410</td>\n",
       "      <td>21.20</td>\n",
       "      <td>29.135945</td>\n",
       "      <td>-16.01</td>\n",
       "      <td>-28.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>usgs:333145090261901_201504</th>\n",
       "      <td>2015-04-01</td>\n",
       "      <td>18</td>\n",
       "      <td>usgs:333145090261901</td>\n",
       "      <td>usgs:333145090261901_201504</td>\n",
       "      <td>21.20</td>\n",
       "      <td>29.056208</td>\n",
       "      <td>-16.01</td>\n",
       "      <td>-28.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>usgs:333218090271101_ss</th>\n",
       "      <td>2008-04-01</td>\n",
       "      <td>0</td>\n",
       "      <td>usgs:333218090271101</td>\n",
       "      <td>usgs:333218090271101_ss</td>\n",
       "      <td>19.32</td>\n",
       "      <td>30.279858</td>\n",
       "      <td>-102.15</td>\n",
       "      <td>-114.34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              datetime  per             obsprefix  \\\n",
       "obsnme                                                              \n",
       "usgs:333145090261901_201310 2013-10-01   15  usgs:333145090261901   \n",
       "usgs:333145090261901_201404 2014-04-01   16  usgs:333145090261901   \n",
       "usgs:333145090261901_201410 2014-10-01   17  usgs:333145090261901   \n",
       "usgs:333145090261901_201504 2015-04-01   18  usgs:333145090261901   \n",
       "usgs:333218090271101_ss     2008-04-01    0  usgs:333218090271101   \n",
       "\n",
       "                                                  obsnme  obs_head   sim_head  \\\n",
       "obsnme                                                                          \n",
       "usgs:333145090261901_201310  usgs:333145090261901_201310     20.86  29.015975   \n",
       "usgs:333145090261901_201404  usgs:333145090261901_201404     20.93  28.948578   \n",
       "usgs:333145090261901_201410  usgs:333145090261901_201410     21.20  29.135945   \n",
       "usgs:333145090261901_201504  usgs:333145090261901_201504     21.20  29.056208   \n",
       "usgs:333218090271101_ss          usgs:333218090271101_ss     19.32  30.279858   \n",
       "\n",
       "                             screen_top  screen_botm  \n",
       "obsnme                                                \n",
       "usgs:333145090261901_201310      -16.01       -28.20  \n",
       "usgs:333145090261901_201404      -16.01       -28.20  \n",
       "usgs:333145090261901_201410      -16.01       -28.20  \n",
       "usgs:333145090261901_201504      -16.01       -28.20  \n",
       "usgs:333218090271101_ss         -102.15      -114.34  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from mfobs.heads import get_head_obs\n",
    "\n",
    "base_obs = get_head_obs(perioddata,\n",
    "                        modelgrid_transform=modelgrid_transform,\n",
    "                        model_output_file=headobs_output_file,\n",
    "                        observed_values_file=head_obs,\n",
    "                        observed_values_metadata_file=head_obs_info,\n",
    "                        observed_values_obsval_col='head',\n",
    "                        gwf_obs_input_file=headobs_input_file,\n",
    "                        hk_arrays=hk_arrays,\n",
    "                        top_array=top_array,\n",
    "                        botm_arrays=botm_arrays,\n",
    "                        label_period_as_steady_state=0,\n",
    "                        steady_state_period_start=steady_state_period_start,\n",
    "                        steady_state_period_end=steady_state_period_end,\n",
    "                        write_ins=True, \n",
    "                        outfile=output_folder / 'processed_head_obs.dat'\n",
    "                        )\n",
    "base_obs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### PEST instruction files\n",
    "Can be written in tandem with the processed observation output (``write_ins=True``). This way, \n",
    "\n",
    "* observation processing functions like ``get_head_obs`` can be used initially to get an instruction file and a set of observed values for making a PEST control file\n",
    "* and subsequently for processing model output during a PEST run, that can then be read by PEST via the instruciton file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.907048Z",
     "iopub.status.busy": "2020-10-13T14:48:09.906537Z",
     "iopub.status.idle": "2020-10-13T14:48:09.908880Z",
     "shell.execute_reply": "2020-10-13T14:48:09.909305Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pif @\n",
      "@obsnme@\n",
      "l1 w w w w w !usgs:333145090261901_201310! w w\n",
      "l1 w w w w w !usgs:333145090261901_201404! w w\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open('output/processed_head_obs.dat.ins') as src:\n",
    "    print(''.join([l for l in src.readlines()[:4]]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### plot base data for a site"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:09.917615Z",
     "iopub.status.busy": "2020-10-13T14:48:09.916782Z",
     "iopub.status.idle": "2020-10-13T14:48:10.270067Z",
     "shell.execute_reply": "2020-10-13T14:48:10.270571Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Head, in meters above sea level')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "site = 'usgs:334420090140101'\n",
    "site_values = base_obs.loc[base_obs.obsprefix == site, ['datetime', 'obs_head', 'sim_head', 'obsnme']].copy()\n",
    "site_values.index = site_values.datetime\n",
    "ax = site_values[['obs_head', 'sim_head']].plot()\n",
    "ax.set_title(site)\n",
    "ax.set_ylabel('Head, in meters above sea level')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Temporal head differences\n",
    "The base values returned by ``get_head_obs`` can be processed further into temporal head differences: \n",
    "\n",
    "* similar to ``get_head_obs`` the ``get_temporal_head_difference_obs`` function can also write an instruction file in tandem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:10.352676Z",
     "iopub.status.busy": "2020-10-13T14:48:10.276144Z",
     "iopub.status.idle": "2020-10-13T14:48:10.447162Z",
     "shell.execute_reply": "2020-10-13T14:48:10.446715Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote output/processed_thead_diff_obs.dat.ins\n"
     ]
    }
   ],
   "source": [
    "from mfobs.heads import get_temporal_head_difference_obs\n",
    "\n",
    "thead_diffs = get_temporal_head_difference_obs(base_obs,\n",
    "                                               perioddata,\n",
    "                                               write_ins=True,\n",
    "                                               outfile=output_folder / 'processed_thead_diff_obs.dat')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:10.460935Z",
     "iopub.status.busy": "2020-10-13T14:48:10.460470Z",
     "iopub.status.idle": "2020-10-13T14:48:10.465634Z",
     "shell.execute_reply": "2020-10-13T14:48:10.465194Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>per</th>\n",
       "      <th>obsprefix</th>\n",
       "      <th>obsnme</th>\n",
       "      <th>obs_head</th>\n",
       "      <th>sim_head</th>\n",
       "      <th>screen_top</th>\n",
       "      <th>screen_botm</th>\n",
       "      <th>obsval</th>\n",
       "      <th>sim_obsval</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014-04-01</td>\n",
       "      <td>16</td>\n",
       "      <td>usgs:333145090261901</td>\n",
       "      <td>usgs:333145090261901_201404d201310</td>\n",
       "      <td>20.93</td>\n",
       "      <td>28.948578</td>\n",
       "      <td>-16.01</td>\n",
       "      <td>-28.20</td>\n",
       "      <td>0.07</td>\n",
       "      <td>-0.067397</td>\n",
       "      <td>heads_tdiff</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014-10-01</td>\n",
       "      <td>17</td>\n",
       "      <td>usgs:333145090261901</td>\n",
       "      <td>usgs:333145090261901_201410d201404</td>\n",
       "      <td>21.20</td>\n",
       "      <td>29.135945</td>\n",
       "      <td>-16.01</td>\n",
       "      <td>-28.20</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.187367</td>\n",
       "      <td>heads_tdiff</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-04-01</td>\n",
       "      <td>18</td>\n",
       "      <td>usgs:333145090261901</td>\n",
       "      <td>usgs:333145090261901_201504d201410</td>\n",
       "      <td>21.20</td>\n",
       "      <td>29.056208</td>\n",
       "      <td>-16.01</td>\n",
       "      <td>-28.20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.079737</td>\n",
       "      <td>heads_tdiff</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2008-04-01</td>\n",
       "      <td>4</td>\n",
       "      <td>usgs:333218090271101</td>\n",
       "      <td>usgs:333218090271101_200804d200710</td>\n",
       "      <td>19.32</td>\n",
       "      <td>27.749777</td>\n",
       "      <td>-102.15</td>\n",
       "      <td>-114.34</td>\n",
       "      <td>-0.19</td>\n",
       "      <td>-0.749017</td>\n",
       "      <td>heads_tdiff</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2008-10-01</td>\n",
       "      <td>5</td>\n",
       "      <td>usgs:333218090271101</td>\n",
       "      <td>usgs:333218090271101_200810d200804</td>\n",
       "      <td>19.51</td>\n",
       "      <td>28.810415</td>\n",
       "      <td>-102.15</td>\n",
       "      <td>-114.34</td>\n",
       "      <td>0.19</td>\n",
       "      <td>1.060638</td>\n",
       "      <td>heads_tdiff</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    datetime  per             obsprefix                              obsnme  \\\n",
       "1 2014-04-01   16  usgs:333145090261901  usgs:333145090261901_201404d201310   \n",
       "2 2014-10-01   17  usgs:333145090261901  usgs:333145090261901_201410d201404   \n",
       "3 2015-04-01   18  usgs:333145090261901  usgs:333145090261901_201504d201410   \n",
       "5 2008-04-01    4  usgs:333218090271101  usgs:333218090271101_200804d200710   \n",
       "6 2008-10-01    5  usgs:333218090271101  usgs:333218090271101_200810d200804   \n",
       "\n",
       "   obs_head   sim_head  screen_top  screen_botm  obsval  sim_obsval  \\\n",
       "1     20.93  28.948578      -16.01       -28.20    0.07   -0.067397   \n",
       "2     21.20  29.135945      -16.01       -28.20    0.27    0.187367   \n",
       "3     21.20  29.056208      -16.01       -28.20    0.00   -0.079737   \n",
       "5     19.32  27.749777     -102.15      -114.34   -0.19   -0.749017   \n",
       "6     19.51  28.810415     -102.15      -114.34    0.19    1.060638   \n",
       "\n",
       "         group  \n",
       "1  heads_tdiff  \n",
       "2  heads_tdiff  \n",
       "3  heads_tdiff  \n",
       "5  heads_tdiff  \n",
       "6  heads_tdiff  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "thead_diffs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### plot temporal head differences for a site"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-13T14:48:10.532304Z",
     "iopub.status.busy": "2020-10-13T14:48:10.493909Z",
     "iopub.status.idle": "2020-10-13T14:48:10.695415Z",
     "shell.execute_reply": "2020-10-13T14:48:10.694655Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Head change, in meters')"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "site = 'usgs:334420090140101'\n",
    "site_values = thead_diffs.loc[thead_diffs.obsprefix == site, ['datetime', 'obsval', 'sim_obsval', 'obsnme']].copy()\n",
    "site_values.index = site_values.datetime\n",
    "ax = site_values[['obsval', 'sim_obsval']].plot()\n",
    "ax.set_title(site)\n",
    "ax.set_ylabel('Head change, in meters')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
